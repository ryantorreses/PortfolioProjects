/* Cleaning Data in SQL Queries
*/
Select *
FROM PortfolioProject.dbo.NashvilleHousing




-- Standardize date format
Select SALEDATECONVERTED, CONVERT(DATE,SALEDATE)
FROM PortfolioProject.dbo.NashvilleHousing


UPDATE NASHVILLEHOUSING
SET SALEDATE = CONVERT(DATE,SALEDATE)

ALTER TABLE NASHVILLEHOUSING
ADD SALEDATECONVERTED DATE;

UPDATE NASHVILLEHOUSING
SET SALEDATECONVERTED = CONVERT(DATE,SALEDATE)




-- Populate property address data
SELECT *
FROM PortfolioProject.dbo.NashvilleHousing
-- WHERE PROPERTYADDRESS IS NULL
ORDER BY PARCELID


SELECT A.PARCELID, A.PROPERTYADDRESS, B.PARCELID, B.PROPERTYADDRESS, ISNULL(A.PROPERTYADDRESS, B.PROPERTYADDRESS)
FROM PORTFOLIOPROJECT.DBO.NASHVILLEHOUSING A
JOIN PORTFOLIOPROJECT.DBO.NASHVILLEHOUSING B
	ON A.PARCELID = B.PARCELID
	AND A.[UNIQUEID ] <> B.[UNIQUEID ]
WHERE A.PROPERTYADDRESS IS NULL


UPDATE A
SET PROPERTYADDRESS = ISNULL(A.PROPERTYADDRESS, B.PROPERTYADDRESS)
FROM PortfolioProject.DBO.nASHVILLEHOUSING A
JOIN PortfolioProject.DBO.nASHVILLEHOUSING B
ON A.PARCELID = B.PARCELID
AND A.[UNIQUEID ] <> B.[UNIQUEID ]
WHERE A.PROPERTYADDRESS IS NULL




-- Breaking out address into individual columns (Address, City, State)
SELECT PROPERTYADDRESS
FROM PortfolioProject.DBO.NASHVILLEHOUSING


SELECT 
SUBSTRING(PROPERTYADDRESS, 1, CHARINDEX(',', PROPERTYADDRESS) -1) AS ADDRESS
, SUBSTRING(PROPERTYADDRESS, CHARINDEX(',', PROPERTYADDRESS) +1, LEN(PROPERTYADDRESS)) AS ADDRESS
FROM PortfolioProject.DBO.NASHVILLEHOUSING

 ALTER TABLE NASHVILLEHOUSING
ADD PROPERTYSPLITADDRESS NVARCHAR(255);

UPDATE NASHVILLEHOUSING
SET PROPERTYSPLITADDRESS = SUBSTRING(PROPERTYADDRESS, 1, CHARINDEX(',', PROPERTYADDRESS) -1)

ALTER TABLE NASHVILLEHOUSING
ADD PROPERTYSPLITCITY NVARCHAR(255);

UPDATE NASHVILLEHOUSING
SET PROPERTYSPLITCITY = SUBSTRING(PROPERTYADDRESS, CHARINDEX(',', PROPERTYADDRESS) +1, LEN(PROPERTYADDRESS))

SELECT OWNERADDRESS 
FROM PortfolioProject.DBO.NASHVILLEHOUSING

SELECT
PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 3)
,PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 2)
,PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 1)
FROM PortfolioProject.DBO.NASHVILLEHOUSING


 ALTER TABLE NASHVILLEHOUSING
ADD OWNERSPLITADDRESS NVARCHAR(255);

UPDATE NASHVILLEHOUSING
SET OWNERSPLITADDRESS = PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 3)

ALTER TABLE NASHVILLEHOUSING
ADD OWNERSPLITCITY NVARCHAR(255);

UPDATE NASHVILLEHOUSING
SET OWNERSPLITCITY = PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 2)

ALTER TABLE NASHVILLEHOUSING
ADD OWNERSPLITSTATE NVARCHAR(255);

UPDATE NASHVILLEHOUSING
SET OWNERSPLITSTATE = PARSENAME(REPLACE(OWNERADDRESS, ',', '.'), 1)

SELECT *
FROM PortfolioProject.DBO.NASHVILLEHOUSING




-- Change Y and N to Yes and No in "Sold as Vacant" field
SELECT DISTINCT(SOLDASVACANT), COUNT(SOLDASVACANT)
FROM PortfolioProject.DBO.NASHVILLEHOUSING
GROUP BY SOLDASVACANT
ORDER BY 2


SELECT SOLDASVACANT
, CASE WHEN SOLDASVACANT = 'Y' THEN 'YES'
WHEN SOLDASVACANT = 'N' THEN 'NO'
ELSE SOLDASVACANT
END
FROM PortfolioProject.DBO.NASHVILLEHOUSING

UPDATE NASHVILLEHOUSING
SET SOLDASVACANT = CASE WHEN SOLDASVACANT = 'Y' THEN 'YES'
WHEN SOLDASVACANT = 'N' THEN 'NO'
ELSE SOLDASVACANT
END




-- Remove duplicates
WITH ROWNUMCTE AS(
SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY PARCELID,
				 PROPERTYADDRESS,
				 SALEPRICE,
				 SALEDATE,
				 LEGALREFERENCE
				 ORDER BY
					UNIQUEID
					)	ROW_NUM

FROM PortfolioProject.DBO.NASHVILLEHOUSING
)

SELECT * 
FROM ROWNUMCTE
WHERE ROW_NUM > 1
ORDER BY PROPERTYADDRESS




-- Delete Unused Columns
SELECT *
FROM PortfolioProject.DBO.NASHVILLEHOUSING

alter table PortfolioProject.dbo.NaSHVILLEHOUSING
DROP COLUMN OWNERADDRESS, TAXDISTRICT, PROPERTYADDRESS

alter table PortfolioProject.dbo.NaSHVILLEHOUSING
DROP COLUMN SALEDATE